from tokens import Tokens


def AMientras(cadena):

    cuentatokens = 0  # definir va a tener siempre 4 tokens

    for token in Tokens():
        
        cuentatokens += cadena.split().count(token)
        print (cuentatokens)

    #[]
    #print (cadena)
    if cuentatokens == 2:
        # lfabeto aceptado
        A = [
            'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'ñ', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
            ' ', '<', '>', '=',
            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'
            ]
        #Bandera por si la entrada no pertenece
        #al alfabeto de entrada
        bandera = True
        retorno = False
        #Tabla de transición
        TablaT = [
            [0,'m',1], [1,'i',2], [2,'e',3], [3,'n',4],[4,'t',5], [5,'r',6], [6,'a',7],[7,'s',8], [8,' ',9], [9,' ',9],

            [9, 'a', 10], [9, 'b', 10], [9, 'c', 10], [9, 'd', 10], [9, 'e', 10], [9, 'f', 10], [9, 'g', 10],
            [9, 'h', 10], [9, 'i', 10], [9, 'j', 10], [9, 'k', 10], [9, 'l', 10], [9, 'm', 10], [9, 'n', 10],
            [9, 'ñ', 10], [9, 'o', 10], [9, 'p', 10], [9, 'q', 10], [9, 'r', 10], [9, 's', 10], [9, 't', 10],
            [9, 'u', 10], [9, 'v', 10], [9, 'w', 10], [9, 'x', 10], [9, 'y', 10], [9, 'z', 10], [9, '0', 10],
            [9, '1', 10], [9, '2', 10], [9, '3', 10], [9, '4', 10], [9, '5', 10], [9, '6', 10], [9, '7', 10],
            [9, '8', 10], [9, '9', 10],

            [10, 'a', 10], [10, 'b', 10], [10, 'c', 10], [10, 'd', 10], [10, 'e', 10], [10, 'f', 10], [10, 'g', 10],
            [10, 'h', 10], [10, 'i', 10], [10, 'j', 10], [10, 'k', 10], [10, 'l', 10], [10, 'm', 10], [10, 'n', 10],
            [10, 'ñ', 10], [10, 'o', 10], [10, 'p', 10], [10, 'q', 10], [10, 'r', 10], [10, 's', 10], [10, 't', 10],
            [10, 'u', 10], [10, 'v', 10], [10, 'w', 10], [10, 'x', 10], [10, 'y', 10], [10, 'z', 10], [10, '0', 10],
            [10, '1', 10], [10, '2', 10], [10, '3', 10], [10, '4', 10], [10, '5', 10], [10, '6', 10], [10, '7', 10],
            [10, '8', 10], [10, '9', 10],

            [10, '<', 11], [10, '>', 11],[10, '=', 11],

            [10, ' ', 19], [19, ' ', 19],[19, '=', 11],[19, '<', 11],[19, '>', 11],

            [11, 'a', 12], [11, 'b', 12], [11, 'c', 12], [11, 'd', 12], [11, 'e', 12], [11, 'f', 12], [11, 'g', 12],
            [11, 'h', 12], [11, 'i', 12], [11, 'j', 12], [11, 'k', 12], [11, 'l', 12], [11, 'm', 12], [11, 'n', 12],
            [11, 'ñ', 12], [11, 'o', 12], [11, 'p', 12], [11, 'q', 12], [11, 'r', 12], [11, 's', 12], [11, 't', 12],
            [11, 'u', 12], [11, 'v', 12], [11, 'w', 12], [11, 'x', 12], [11, 'y', 12], [11, 'z', 12], [11, '0', 12],
            [11, '1', 12], [11, '2', 12], [11, '3', 12], [11, '4', 12], [11, '5', 12], [11, '6', 12], [11, '7', 12],
            [11, '8', 12], [11, '9', 12],

            [11, '=', 20],
            [20, ' ', 21],[21, ' ', 21],

            [21, 'a', 12], [21, 'b', 12], [21, 'c', 12], [21, 'd', 12], [21, 'e', 12], [21, 'f', 12], [21, 'g', 12],
            [21, 'h', 12], [21, 'i', 12], [21, 'j', 12], [21, 'k', 12], [21, 'l', 12], [21, 'm', 12], [21, 'n', 12],
            [21, 'ñ', 12], [21, 'o', 12], [21, 'p', 12], [21, 'q', 12], [21, 'r', 12], [21, 's', 12], [21, 't', 12],
            [21, 'u', 12], [21, 'v', 12], [21, 'w', 12], [21, 'x', 12], [21, 'y', 12], [21, 'z', 12], [21, '0', 12],
            [21, '1', 12], [21, '2', 12], [21, '3', 12], [21, '4', 12], [21, '5', 12], [21, '6', 12], [21, '7', 12],
            [21, '8', 12], [21, '9', 12],

            [20, 'a', 12], [20, 'b', 12], [20, 'c', 12], [20, 'd', 12], [20, 'e', 12], [20, 'f', 12], [20, 'g', 12],
            [20, 'h', 12], [20, 'i', 12], [20, 'j', 12], [20, 'k', 12], [20, 'l', 12], [20, 'm', 12], [20, 'n', 12],
            [20, 'ñ', 12], [20, 'o', 12], [20, 'p', 12], [20, 'q', 12], [20, 'r', 12], [20, 's', 12], [20, 't', 12],
            [20, 'u', 12], [20, 'v', 12], [20, 'w', 12], [20, 'x', 12], [20, 'y', 12], [20, 'z', 12], [20, '0', 12],
            [20, '1', 12], [20, '2', 12], [20, '3', 12], [20, '4', 12], [20, '5', 12], [20, '6', 12], [20, '7', 12],
            [20, '8', 12], [20, '9', 12],

            [11, ' ', 21],[21, ' ', 21],
            [21, 'a', 12], [21, 'b', 12], [21, 'c', 12], [21, 'd', 12], [21, 'e', 12], [21, 'f', 12], [21, 'g', 12],
            [21, 'h', 12], [21, 'i', 12], [21, 'j', 12], [21, 'k', 12], [21, 'l', 12], [21, 'm', 12], [21, 'n', 12],
            [21, 'ñ', 12], [21, 'o', 12], [21, 'p', 12], [21, 'q', 12], [21, 'r', 12], [21, 's', 12], [21, 't', 12],
            [21, 'u', 12], [21, 'v', 12], [21, 'w', 12], [21, 'x', 12], [21, 'y', 12], [21, 'z', 12], [21, '0', 12],
            [21, '1', 12], [21, '2', 12], [21, '3', 12], [21, '4', 12], [21, '5', 12], [21, '6', 12], [21, '7', 12],
            [21, '8', 12], [21, '9', 12],

            [12, 'a', 12], [12, 'b', 12], [12, 'c', 12], [12, 'd', 12], [12, 'e', 12], [12, 'f', 12], [12, 'g', 12],
            [12, 'h', 12], [12, 'i', 12], [12, 'j', 12], [12, 'k', 12], [12, 'l', 12], [12, 'm', 12], [12, 'n', 12],
            [12, 'ñ', 12], [12, 'o', 12], [12, 'p', 12], [12, 'q', 12], [12, 'r', 12], [12, 's', 12], [12, 't', 12],
            [12, 'u', 12], [12, 'v', 12], [12, 'w', 12], [12, 'x', 12], [12, 'y', 12], [12, 'z', 12], [12, '0', 12],
            [12, '1', 12], [12, '2', 12], [12, '3', 12], [12, '4', 12], [12, '5', 12], [12, '6', 12], [12, '7', 12],
            [12, '8', 12], [12, '9', 12],

            [12, ' ', 13], [13, ' ', 13],

            [13, 'y', 9], [13, 'o', 9],

            [13, 'h', 14],[14, 'a', 15],[15, 'c', 16],[16, 'e', 17],[17, 'r', 18]
        ]
        cantidad = len(TablaT)
        #print (cantidad)
        #Tabla de estados de la comparación
        TablaC = []
        #Estados finales
        EF = [18]
        #Estado inicial
        E = 0
        #Estado Actual
        EA = E
        #Cadena de entrada
        CE = cadena
        #Recorremos la Cadena de entrada
        for c in CE:
            i = 0
            #print(c)
            #Verificamos que sea del alfabeto aceptado
            if c in A:
                #print("Esta en el alfabeto")
                #Buscamos en la tablaT
                for f in TablaT:
                    i = i + 1
                    #Recorrido de las producciones
                    #Buscamos el estado actual y el caracter de entrada
                    if c in f[1] and EA == f[0]:
                        #Agregamos a la tabla final
                        TablaC.append([EA,c,f[2]])
                        #print(f[2])
                        #Actualizamos el estado actual
                        EA = f[2]
                        #print("Estado Actual: "+str(EA))
                        break
                    if i >= cantidad:
                        bandera = False
                        break
            else:
                print("Cadena no pertenece al alfabeto")
                bandera = False
                break
        #Comparamos el estado final
        #Para saber si es terminal y se acepta
        #o no la cadena de entrada.
        if EA in EF and bandera == True:
            print("---------------------------------\n")
            print("Se acepta la cadena de entrada!!!\n")
            retorno = True
            #print("-----Tabla de transiciones-------\n")
            #for t in TablaC:
                #print(t)
        else:
            print("No se acepta la cadena de entrada!!!\n")
            retorno = False
            #print("-----Tabla de transiciones-------\n")
            #for t in TablaC:
                #print(t)

        return retorno

    else:
        return False
